#
# Install the httpyac extension for Visual Studio Code to run these tests.
# https://marketplace.visualstudio.com/items?itemName=anoff.httpyac
#

# Uncomment variables below, only if using the VSCode REST Client
#@ENDPOINT={{$dotenv %ENDPOINT}}
#@JWT_TOKEN={{$dotenv %JWT_TOKEN}}
#@BASIC_AUTH_USER={{$dotenv %BASIC_AUTH_USER}}
#@BASIC_AUTH_PASSWORD={{$dotenv %BASIC_AUTH_PASSWORD}}


### Root URL
GET http://{{ENDPOINT}}

?? status == 200


### System info
GET http://{{ENDPOINT}}/info

?? status == 200
?? body uptime isString
?? body cpuCount isNumber


### Request inspection GET
GET http://{{ENDPOINT}}/inspect

?? status == 200
?? body remoteAddr isString
?? body method == GET


### Request inspection with query
GET http://{{ENDPOINT}}/inspect?someName=Brian&someAge=76

?? status == 200
?? body query.someName == Brian
?? body query.someAge == 76


### Request inspection POST
POST http://{{ENDPOINT}}/inspect
Content-Type: application/json

{
  "name": "Brian Eno",
  "age": 76
}

?? status == 200
?? body body includes Brian
?? body method == POST


### System health
GET http://{{ENDPOINT}}/healthy

?? status == 200
?? body includes OK


### Random numbers
GET http://{{ENDPOINT}}/number/5000

?? status == 200
?? body matches ^\d+


### Random words
GET http://{{ENDPOINT}}/word/6

?? status == 200
?? body matches ^\D+


### Status code
GET http://{{ENDPOINT}}/status/418

?? status == 418


### Wildcard path defaults to inspection
PUT http://{{ENDPOINT}}/this/goes/somwhere

?? status == 200
?? body method == PUT


### UUID generation deterministic
GET http://{{ENDPOINT}}/uuid/i-like-jam-on-toast

?? status == 200
?? body matches ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
?? body startsWith 692d6c69


### UUID generation random
GET http://{{ENDPOINT}}/uuid

?? status == 200
?? body matches ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$


### Basic auth fails without credentials
GET http://{{ENDPOINT}}/auth/basic

?? status == 401


### Basic auth fails with wrong credentials
GET http://{{ENDPOINT}}/auth/basic
Authorization: Basic sneakyBob mySecretPwd123

?? status == 401


### Basic auth succeeds with correct credentials
GET http://{{ENDPOINT}}/auth/basic
Authorization: Basic {{BASIC_AUTH_USER}} {{BASIC_AUTH_PASSWORD}}

?? status == 200


### JWT auth fails without token
POST http://{{ENDPOINT}}/auth/jwt

?? status == 401


### JWT auth fails with wrong token
POST http://{{ENDPOINT}}/auth/jwt
Authorization: Bearer 11111222222233333444444

?? status == 401


### JWT auth succeeds with correct token
POST http://{{ENDPOINT}}/auth/jwt
Authorization: Bearer {{JWT_TOKEN}}

?? status == 200